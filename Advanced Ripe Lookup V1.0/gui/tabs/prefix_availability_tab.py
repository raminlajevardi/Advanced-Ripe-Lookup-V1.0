import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext

# Extracted from AdvancedRIPEIPLookup for modular UI.
# This function expects 'app' to be an instance of AdvancedRIPEIPLookup (or compatible).

def create_prefix_availability_tab(self):

        self.pa_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.pa_tab, text="Prefix Availability")
        input_frame = tk.LabelFrame(self.pa_tab, text="Add Prefix", padx=5, pady=5)
        input_frame.pack(fill="x", padx=10, pady=5)
        self.prefix_label = tk.Label(input_frame, text="Prefix (e.g., 212.16.64.0/24):")
        self.prefix_label.grid(row=0, column=0, sticky="w")
        self.pa_prefix_entry = tk.Entry(input_frame, width=30)
        self.pa_prefix_entry.grid(row=0, column=1)
        self.supernet_analyzer_check = tk.Checkbutton(input_frame, text="Supernet Analyzer", variable=self.supernet_analyzer_enabled, command=self.update_prefix_label)
        self.supernet_analyzer_check.grid(row=0, column=2)
        self.add_button = tk.Button(input_frame, text="Add", command=self.add_prefix)
        self.add_button.grid(row=0, column=3)
        self.import_button = tk.Button(input_frame, text="Import File", command=self.import_prefix_file)
        self.import_button.grid(row=0, column=4)
        monitor_frame = tk.LabelFrame(self.pa_tab, text="Monitoring", padx=5, pady=5)
        monitor_frame.pack(fill="x", padx=10, pady=5)
        tk.Label(monitor_frame, text="Refresh Time (minutes):").grid(row=0, column=0, sticky="w")
        self.pa_refresh_entry = tk.Entry(monitor_frame, width=10)
        self.pa_refresh_entry.insert(0, "5")
        self.pa_refresh_entry.grid(row=0, column=1)
        self.start_button = tk.Button(monitor_frame, text="Start Monitoring", command=self.start_monitoring)
        self.start_button.grid(row=0, column=2)
        self.stop_button = tk.Button(monitor_frame, text="Stop Monitoring", command=self.stop_monitoring)
        self.stop_button.grid(row=0, column=3)
        tk.Checkbutton(monitor_frame, text="Enable Beep", variable=self.beep_enabled).grid(row=0, column=4)
        tk.Checkbutton(monitor_frame, text="Enable Email Alarm", variable=self.email_alarm_enabled).grid(row=0, column=5)
        self.monitor_status_label = tk.Label(monitor_frame, text="Monitoring: Inactive", fg="red")
        self.monitor_status_label.grid(row=0, column=6)
        self.countdown_label = tk.Label(monitor_frame, text="", fg="blue")
        self.countdown_label.grid(row=0, column=7, padx=5)
        self.start_time_label = tk.Label(monitor_frame, text="", fg="blue")
        self.start_time_label.grid(row=0, column=8, padx=5)
        result_frame = tk.LabelFrame(self.pa_tab, text="Prefix List", padx=5, pady=5)
        result_frame.pack(fill="both", expand=True, padx=10, pady=5)
        pa_scroll_y = ttk.Scrollbar(result_frame)
        pa_scroll_y.pack(side="right", fill="y")
        pa_scroll_x = ttk.Scrollbar(result_frame, orient="horizontal")
        pa_scroll_x.pack(side="bottom", fill="x")
        self.pa_tree = ttk.Treeview(result_frame, yscrollcommand=pa_scroll_y.set, xscrollcommand=pa_scroll_x.set, selectmode="extended")
        self.pa_tree.pack(fill="both", expand=True)
        pa_scroll_y.config(command=self.pa_tree.yview)
        pa_scroll_x.config(command=self.pa_tree.xview)
        pa_columns = ["#", "Prefix", "ASN Origin", "Last Update", "Status"]  # fixed with row number
        self.pa_tree["columns"] = pa_columns
        self.pa_tree.configure(show="headings")
        self.pa_tree.column("#0", width=0, stretch=tk.NO)
        for col in pa_columns:
            self.pa_tree.column(col, width=150, anchor="w", minwidth=50, stretch=tk.YES)
            self.pa_tree.heading(col, text=col)
        self.pa_tree.tag_configure('available', background='lightgreen')
        self.pa_tree.tag_configure('not_available', background='lightcoral')
        button_frame = tk.Frame(self.pa_tab)
        button_frame.pack(fill="x", padx=10, pady=5)
        self.delete_selected_button = tk.Button(button_frame, text="Delete Selected", command=self.delete_selected)
        self.delete_selected_button.pack(side="left", padx=5)
        self.delete_all_button = tk.Button(button_frame, text="Delete All", command=self.delete_all)
        self.delete_all_button.pack(side="left", padx=5)
        self.pa_export_button = tk.Button(button_frame, text="Export to Excel", command=self.export_pa_to_excel)
        self.pa_export_button.pack(side="left", padx=5)
        self.display_prefix_list()
