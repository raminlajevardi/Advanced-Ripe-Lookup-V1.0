import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext

# Extracted from AdvancedRIPEIPLookup for modular UI.
# This function expects 'app' to be an instance of AdvancedRIPEIPLookup (or compatible).

def create_bgprpki_auditor_tab(self):

        self.bgprpki_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.bgprpki_tab, text="BGP RPKI Auditor")
        form_frame = tk.LabelFrame(self.bgprpki_tab, text="Settings", padx=5, pady=5)
        form_frame.pack(fill="x", padx=10, pady=5)
        form_grid = tk.Frame(form_frame)
        form_grid.pack(fill="x", padx=5, pady=5)
        self.bgprpki_host = tk.StringVar()
        tk.Label(form_grid, text="Router IP").grid(row=0, column=0, sticky="w")
        tk.Entry(form_grid, textvariable=self.bgprpki_host, width=20).grid(row=0, column=1)
        self.bgprpki_port = tk.StringVar(value="22")
        tk.Label(form_grid, text="Port").grid(row=0, column=2, sticky="w")
        tk.Entry(form_grid, textvariable=self.bgprpki_port, width=10).grid(row=0, column=3)
        self.bgprpki_user = tk.StringVar()
        tk.Label(form_grid, text="Username").grid(row=1, column=0, sticky="w")
        tk.Entry(form_grid, textvariable=self.bgprpki_user, width=20).grid(row=1, column=1)
        self.bgprpki_pass = tk.StringVar()
        tk.Label(form_grid, text="Password").grid(row=1, column=2, sticky="w")
        tk.Entry(form_grid, textvariable=self.bgprpki_pass, show="*", width=20).grid(row=1, column=3)
        self.bgprpki_vendor = tk.StringVar(value="ios-xe")
        tk.Label(form_grid, text="Vendor").grid(row=2, column=0, sticky="w")
        vendor_combo = ttk.Combobox(form_grid, textvariable=self.bgprpki_vendor, values=["ios-xe", "ios-xr", "auto"], width=17)
        vendor_combo.grid(row=2, column=1)
        self.bgprpki_afi = tk.StringVar(value="ipv4")
        tk.Label(form_grid, text="AFI").grid(row=2, column=2, sticky="w")
        afi_combo = ttk.Combobox(form_grid, textvariable=self.bgprpki_afi, values=["ipv4", "ipv6"], width=17)
        afi_combo.grid(row=2, column=3)
        self.bgprpki_filter_asn = tk.StringVar()
        tk.Label(form_grid, text="Filter ASN").grid(row=3, column=0, sticky="w")
        tk.Entry(form_grid, textvariable=self.bgprpki_filter_asn, width=20).grid(row=3, column=1)
        self.bgprpki_filter_asn.set("e.g. 12880 or AS12880")
        self.bgprpki_filter_comm = tk.StringVar()
        tk.Label(form_grid, text="Filter Community").grid(row=3, column=2, sticky="w")
        tk.Entry(form_grid, textvariable=self.bgprpki_filter_comm, width=20).grid(row=3, column=3)
        self.bgprpki_filter_comm.set("e.g. 65001:100 or 65001:*")
        self.bgprpki_limit = tk.StringVar(value="20")
        tk.Label(form_grid, text="Max Prefixes (0=all)").grid(row=4, column=0, sticky="w")
        tk.Entry(form_grid, textvariable=self.bgprpki_limit, width=10).grid(row=4, column=1)
        self.bgprpki_concurrency = tk.StringVar(value="1")
        tk.Label(form_grid, text="Concurrency").grid(row=4, column=2, sticky="w")
        tk.Entry(form_grid, textvariable=self.bgprpki_concurrency, width=10).grid(row=4, column=3)
        self.bgprpki_only_bad = tk.BooleanVar(value=False)
        tk.Checkbutton(form_grid, text="Show only Invalid/Not Found", variable=self.bgprpki_only_bad).grid(row=5, column=0, columnspan=2, sticky="w")
        self.bgprpki_rpki_url = tk.StringVar(value="https://stat.ripe.net/data/rpki-validation/data.json")
        tk.Label(form_grid, text="RPKI API URL").grid(row=6, column=0, sticky="w")
        tk.Entry(form_grid, textvariable=self.bgprpki_rpki_url, width=50).grid(row=6, column=1, columnspan=3)
        button_frame = tk.Frame(self.bgprpki_tab)
        button_frame.pack(fill="x", padx=10, pady=5)
        self.bgprpki_start_button = tk.Button(button_frame, text="Start", command=self.bgprpki_on_start)
        self.bgprpki_start_button.pack(side="left", padx=5)
        self.bgprpki_stop_button = tk.Button(button_frame, text="Stop", command=self.bgprpki_on_stop)
        self.bgprpki_stop_button.pack(side="left", padx=5)
        self.bgprpki_stop_button.config(state="disabled")
        self.bgprpki_lookup_button = tk.Button(button_frame, text="Lookup Query", command=self.bgprpki_lookup_query)
        self.bgprpki_lookup_button.pack(side="left", padx=5)
        tk.Label(button_frame, text="").pack(side="left", expand=True, fill="x")
        self.bgprpki_export_button = tk.Button(button_frame, text="Export CSV", command=self.bgprpki_on_export)
        self.bgprpki_export_button.pack(side="left", padx=5)
        self.bgprpki_export_button.config(state="disabled")
        self.bgprpki_progress = ttk.Progressbar(self.bgprpki_tab, mode="determinate")
        self.bgprpki_progress.pack(fill="x", padx=10, pady=5)
        tk.Label(self.bgprpki_tab, text="Results").pack(anchor="w", padx=10)
        result_frame = tk.LabelFrame(self.bgprpki_tab, text="BGP Routes", padx=5, pady=5)
        result_frame.pack(fill="both", expand=True, padx=10, pady=5)
        scroll_y = ttk.Scrollbar(result_frame)
        scroll_y.pack(side="right", fill="y")
        scroll_x = ttk.Scrollbar(result_frame, orient="horizontal")
        scroll_x.pack(side="bottom", fill="x")
        self.bgprpki_tree = ttk.Treeview(result_frame, yscrollcommand=scroll_y.set, xscrollcommand=scroll_x.set)
        self.bgprpki_tree.pack(fill="both", expand=True)
        scroll_y.config(command=self.bgprpki_tree.yview)
        scroll_x.config(command=self.bgprpki_tree.xview)
        columns = ["Prefix", "Origin-AS", "Communities", "RPKI", "Detail", "AS Name", "Netname"]
        self.bgprpki_tree["columns"] = columns
        self.bgprpki_tree.column("#0", width=0, stretch=tk.NO)
        for col in columns:
            self.bgprpki_tree.column(col, width=150, anchor="w", minwidth=50, stretch=tk.YES)
            self.bgprpki_tree.heading(col, text=col, command=lambda c=col: self.sort_by_column(c, False))
        self.bgprpki_tree.tag_configure("valid", background="lightgreen")
        self.bgprpki_tree.tag_configure("invalid", background="lightcoral")
        self.bgprpki_tree.tag_configure("not-found", background="orange")
        self.bgprpki_tree.tag_configure("error", background="lightblue")
        tk.Label(self.bgprpki_tab, text="Log").pack(anchor="w", padx=10)
        self.bgprpki_log = tk.Text(self.bgprpki_tab, height=8, state="disabled")
        self.bgprpki_log.pack(fill="x", padx=10, pady=5)
